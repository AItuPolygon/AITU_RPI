// Package openapiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package openapiv1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Defines values for DiscreteValue.
const (
	DiscreteValueBlink DiscreteValue = "blink"
	DiscreteValueOff   DiscreteValue = "off"
	DiscreteValueOn    DiscreteValue = "on"
)

// Defines values for TlEw.
const (
	TlEwG TlEw = "g"
	TlEwR TlEw = "r"
	TlEwY TlEw = "y"
)

// Defines values for TlMode.
const (
	TlModeAuto    TlMode = "auto"
	TlModeManual  TlMode = "manual"
	TlModeOff     TlMode = "off"
	TlModeService TlMode = "service"
)

// Defines values for TlSn.
const (
	TlSnG TlSn = "g"
	TlSnR TlSn = "r"
	TlSnY TlSn = "y"
)

// Discrete defines model for discrete.
type Discrete struct {
	Value DiscreteValue `binding:"required,oneof=off,on,blink" json:"value"`
}

// DiscreteValue defines model for Discrete.Value.
type DiscreteValue string

// Range defines model for range.
type Range struct {
	Value int `binding:"required,gte=0,lte=100" json:"value"`
}

// Tl defines model for tl.
type Tl struct {
	Ew   *TlEw  `binding:"required,oneof=r,y,g" json:"ew,omitempty"`
	Mode TlMode `binding:"required,oneof=off,auto,service,manual" json:"mode"`
	Sn   *TlSn  `binding:"required,oneof=r,y,g" json:"sn,omitempty"`
}

// TlEw defines model for Tl.Ew.
type TlEw string

// TlMode defines model for Tl.Mode.
type TlMode string

// TlSn defines model for Tl.Sn.
type TlSn string

// PostApiAstanaLrtBuilding1JSONRequestBody defines body for PostApiAstanaLrtBuilding1 for application/json ContentType.
type PostApiAstanaLrtBuilding1JSONRequestBody = Discrete

// PostApiAstanaLrtStreetlights1JSONRequestBody defines body for PostApiAstanaLrtStreetlights1 for application/json ContentType.
type PostApiAstanaLrtStreetlights1JSONRequestBody = Discrete

// PostApiAstanaLrtTl1JSONRequestBody defines body for PostApiAstanaLrtTl1 for application/json ContentType.
type PostApiAstanaLrtTl1JSONRequestBody = Tl

// PostApiBusinessCenterBuilding1JSONRequestBody defines body for PostApiBusinessCenterBuilding1 for application/json ContentType.
type PostApiBusinessCenterBuilding1JSONRequestBody = Discrete

// PostApiGovernmentComplexBuilding1JSONRequestBody defines body for PostApiGovernmentComplexBuilding1 for application/json ContentType.
type PostApiGovernmentComplexBuilding1JSONRequestBody = Discrete

// PostApiGovernmentComplexBuilding2JSONRequestBody defines body for PostApiGovernmentComplexBuilding2 for application/json ContentType.
type PostApiGovernmentComplexBuilding2JSONRequestBody = Discrete

// PostApiGovernmentComplexBuilding3JSONRequestBody defines body for PostApiGovernmentComplexBuilding3 for application/json ContentType.
type PostApiGovernmentComplexBuilding3JSONRequestBody = Discrete

// PostApiGovernmentComplexBuilding4JSONRequestBody defines body for PostApiGovernmentComplexBuilding4 for application/json ContentType.
type PostApiGovernmentComplexBuilding4JSONRequestBody = Discrete

// PostApiHospitalBarrierJSONRequestBody defines body for PostApiHospitalBarrier for application/json ContentType.
type PostApiHospitalBarrierJSONRequestBody = Discrete

// PostApiHospitalBuilding1JSONRequestBody defines body for PostApiHospitalBuilding1 for application/json ContentType.
type PostApiHospitalBuilding1JSONRequestBody = Discrete

// PostApiHospitalFireJSONRequestBody defines body for PostApiHospitalFire for application/json ContentType.
type PostApiHospitalFireJSONRequestBody = Discrete

// PostApiHospitalFireAlarmJSONRequestBody defines body for PostApiHospitalFireAlarm for application/json ContentType.
type PostApiHospitalFireAlarmJSONRequestBody = Discrete

// PostApiHospitalFireTruckJSONRequestBody defines body for PostApiHospitalFireTruck for application/json ContentType.
type PostApiHospitalFireTruckJSONRequestBody = Discrete

// PostApiHospitalSirenJSONRequestBody defines body for PostApiHospitalSiren for application/json ContentType.
type PostApiHospitalSirenJSONRequestBody = Discrete

// PostApiSportsComplexStadiumLightsJSONRequestBody defines body for PostApiSportsComplexStadiumLights for application/json ContentType.
type PostApiSportsComplexStadiumLightsJSONRequestBody = Discrete

// PostApiSportsComplexTl1JSONRequestBody defines body for PostApiSportsComplexTl1 for application/json ContentType.
type PostApiSportsComplexTl1JSONRequestBody = Tl

// PostApiWaterPumpBuilding1JSONRequestBody defines body for PostApiWaterPumpBuilding1 for application/json ContentType.
type PostApiWaterPumpBuilding1JSONRequestBody = Discrete

// PostApiWaterPumpPump2JSONRequestBody defines body for PostApiWaterPumpPump2 for application/json ContentType.
type PostApiWaterPumpPump2JSONRequestBody = Range

// PostApiWaterPumpPump3JSONRequestBody defines body for PostApiWaterPumpPump3 for application/json ContentType.
type PostApiWaterPumpPump3JSONRequestBody = Range

// PostApiWaterPumpTransferBaseJSONRequestBody defines body for PostApiWaterPumpTransferBase for application/json ContentType.
type PostApiWaterPumpTransferBaseJSONRequestBody = Discrete

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get information from /api/astana_lrt/building1
	// (GET /api/astana_lrt/building1)
	GetApiAstanaLrtBuilding1(ctx echo.Context) error
	// Post data to /api/astana_lrt/building1
	// (POST /api/astana_lrt/building1)
	PostApiAstanaLrtBuilding1(ctx echo.Context) error
	// Get information from /api/astana_lrt/streetlights1
	// (GET /api/astana_lrt/streetlights1)
	GetApiAstanaLrtStreetlights1(ctx echo.Context) error
	// Post data to /api/astana_lrt/streetlights1
	// (POST /api/astana_lrt/streetlights1)
	PostApiAstanaLrtStreetlights1(ctx echo.Context) error
	// Get information from /api/astana_lrt/tl1
	// (GET /api/astana_lrt/tl1)
	GetApiAstanaLrtTl1(ctx echo.Context) error
	// Post data to /api/astana_lrt/tl1
	// (POST /api/astana_lrt/tl1)
	PostApiAstanaLrtTl1(ctx echo.Context) error
	// Get information from /api/business_center/building1
	// (GET /api/business_center/building1)
	GetApiBusinessCenterBuilding1(ctx echo.Context) error
	// Post data to /api/business_center/building1
	// (POST /api/business_center/building1)
	PostApiBusinessCenterBuilding1(ctx echo.Context) error
	// Get information from /api/government_complex/building1
	// (GET /api/government_complex/building1)
	GetApiGovernmentComplexBuilding1(ctx echo.Context) error
	// Post data to /api/government_complex/building1
	// (POST /api/government_complex/building1)
	PostApiGovernmentComplexBuilding1(ctx echo.Context) error
	// Get information from /api/government_complex/building2
	// (GET /api/government_complex/building2)
	GetApiGovernmentComplexBuilding2(ctx echo.Context) error
	// Post data to /api/government_complex/building2
	// (POST /api/government_complex/building2)
	PostApiGovernmentComplexBuilding2(ctx echo.Context) error
	// Get information from /api/government_complex/building3
	// (GET /api/government_complex/building3)
	GetApiGovernmentComplexBuilding3(ctx echo.Context) error
	// Post data to /api/government_complex/building3
	// (POST /api/government_complex/building3)
	PostApiGovernmentComplexBuilding3(ctx echo.Context) error
	// Get information from /api/government_complex/building4
	// (GET /api/government_complex/building4)
	GetApiGovernmentComplexBuilding4(ctx echo.Context) error
	// Post data to /api/government_complex/building4
	// (POST /api/government_complex/building4)
	PostApiGovernmentComplexBuilding4(ctx echo.Context) error
	// Get information from /api/hospital/barrier
	// (GET /api/hospital/barrier)
	GetApiHospitalBarrier(ctx echo.Context) error
	// Post data to /api/hospital/barrier
	// (POST /api/hospital/barrier)
	PostApiHospitalBarrier(ctx echo.Context) error
	// Get information from /api/hospital/building1
	// (GET /api/hospital/building1)
	GetApiHospitalBuilding1(ctx echo.Context) error
	// Post data to /api/hospital/building1
	// (POST /api/hospital/building1)
	PostApiHospitalBuilding1(ctx echo.Context) error
	// Get information from /api/hospital/fire
	// (GET /api/hospital/fire)
	GetApiHospitalFire(ctx echo.Context) error
	// Post data to /api/hospital/fire
	// (POST /api/hospital/fire)
	PostApiHospitalFire(ctx echo.Context) error
	// Get information from /api/hospital/fire_alarm
	// (GET /api/hospital/fire_alarm)
	GetApiHospitalFireAlarm(ctx echo.Context) error
	// Post data to /api/hospital/fire_alarm
	// (POST /api/hospital/fire_alarm)
	PostApiHospitalFireAlarm(ctx echo.Context) error
	// Get information from /api/hospital/fire_truck
	// (GET /api/hospital/fire_truck)
	GetApiHospitalFireTruck(ctx echo.Context) error
	// Post data to /api/hospital/fire_truck
	// (POST /api/hospital/fire_truck)
	PostApiHospitalFireTruck(ctx echo.Context) error
	// Get information from /api/hospital/siren
	// (GET /api/hospital/siren)
	GetApiHospitalSiren(ctx echo.Context) error
	// Post data to /api/hospital/siren
	// (POST /api/hospital/siren)
	PostApiHospitalSiren(ctx echo.Context) error
	// Get information from /api/sports_complex/stadium_lights
	// (GET /api/sports_complex/stadium_lights)
	GetApiSportsComplexStadiumLights(ctx echo.Context) error
	// Post data to /api/sports_complex/stadium_lights
	// (POST /api/sports_complex/stadium_lights)
	PostApiSportsComplexStadiumLights(ctx echo.Context) error
	// Get information from /api/sports_complex/tl1
	// (GET /api/sports_complex/tl1)
	GetApiSportsComplexTl1(ctx echo.Context) error
	// Post data to /api/sports_complex/tl1
	// (POST /api/sports_complex/tl1)
	PostApiSportsComplexTl1(ctx echo.Context) error
	// Get information from /api/water_pump/building1
	// (GET /api/water_pump/building1)
	GetApiWaterPumpBuilding1(ctx echo.Context) error
	// Post data to /api/water_pump/building1
	// (POST /api/water_pump/building1)
	PostApiWaterPumpBuilding1(ctx echo.Context) error
	// Get information from /api/water_pump/pump2
	// (GET /api/water_pump/pump2)
	GetApiWaterPumpPump2(ctx echo.Context) error
	// Post data to /api/water_pump/pump2
	// (POST /api/water_pump/pump2)
	PostApiWaterPumpPump2(ctx echo.Context) error
	// Get information from /api/water_pump/pump3
	// (GET /api/water_pump/pump3)
	GetApiWaterPumpPump3(ctx echo.Context) error
	// Post data to /api/water_pump/pump3
	// (POST /api/water_pump/pump3)
	PostApiWaterPumpPump3(ctx echo.Context) error
	// Get information from /api/water_pump/transfer_base
	// (GET /api/water_pump/transfer_base)
	GetApiWaterPumpTransferBase(ctx echo.Context) error
	// Post data to /api/water_pump/transfer_base
	// (POST /api/water_pump/transfer_base)
	PostApiWaterPumpTransferBase(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiAstanaLrtBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAstanaLrtBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiAstanaLrtBuilding1(ctx)
	return err
}

// PostApiAstanaLrtBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAstanaLrtBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAstanaLrtBuilding1(ctx)
	return err
}

// GetApiAstanaLrtStreetlights1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAstanaLrtStreetlights1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiAstanaLrtStreetlights1(ctx)
	return err
}

// PostApiAstanaLrtStreetlights1 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAstanaLrtStreetlights1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAstanaLrtStreetlights1(ctx)
	return err
}

// GetApiAstanaLrtTl1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAstanaLrtTl1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiAstanaLrtTl1(ctx)
	return err
}

// PostApiAstanaLrtTl1 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAstanaLrtTl1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAstanaLrtTl1(ctx)
	return err
}

// GetApiBusinessCenterBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiBusinessCenterBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiBusinessCenterBuilding1(ctx)
	return err
}

// PostApiBusinessCenterBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiBusinessCenterBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiBusinessCenterBuilding1(ctx)
	return err
}

// GetApiGovernmentComplexBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiGovernmentComplexBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiGovernmentComplexBuilding1(ctx)
	return err
}

// PostApiGovernmentComplexBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiGovernmentComplexBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiGovernmentComplexBuilding1(ctx)
	return err
}

// GetApiGovernmentComplexBuilding2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiGovernmentComplexBuilding2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiGovernmentComplexBuilding2(ctx)
	return err
}

// PostApiGovernmentComplexBuilding2 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiGovernmentComplexBuilding2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiGovernmentComplexBuilding2(ctx)
	return err
}

// GetApiGovernmentComplexBuilding3 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiGovernmentComplexBuilding3(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiGovernmentComplexBuilding3(ctx)
	return err
}

// PostApiGovernmentComplexBuilding3 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiGovernmentComplexBuilding3(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiGovernmentComplexBuilding3(ctx)
	return err
}

// GetApiGovernmentComplexBuilding4 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiGovernmentComplexBuilding4(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiGovernmentComplexBuilding4(ctx)
	return err
}

// PostApiGovernmentComplexBuilding4 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiGovernmentComplexBuilding4(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiGovernmentComplexBuilding4(ctx)
	return err
}

// GetApiHospitalBarrier converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHospitalBarrier(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHospitalBarrier(ctx)
	return err
}

// PostApiHospitalBarrier converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiHospitalBarrier(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiHospitalBarrier(ctx)
	return err
}

// GetApiHospitalBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHospitalBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHospitalBuilding1(ctx)
	return err
}

// PostApiHospitalBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiHospitalBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiHospitalBuilding1(ctx)
	return err
}

// GetApiHospitalFire converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHospitalFire(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHospitalFire(ctx)
	return err
}

// PostApiHospitalFire converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiHospitalFire(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiHospitalFire(ctx)
	return err
}

// GetApiHospitalFireAlarm converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHospitalFireAlarm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHospitalFireAlarm(ctx)
	return err
}

// PostApiHospitalFireAlarm converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiHospitalFireAlarm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiHospitalFireAlarm(ctx)
	return err
}

// GetApiHospitalFireTruck converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHospitalFireTruck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHospitalFireTruck(ctx)
	return err
}

// PostApiHospitalFireTruck converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiHospitalFireTruck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiHospitalFireTruck(ctx)
	return err
}

// GetApiHospitalSiren converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHospitalSiren(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHospitalSiren(ctx)
	return err
}

// PostApiHospitalSiren converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiHospitalSiren(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiHospitalSiren(ctx)
	return err
}

// GetApiSportsComplexStadiumLights converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiSportsComplexStadiumLights(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiSportsComplexStadiumLights(ctx)
	return err
}

// PostApiSportsComplexStadiumLights converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiSportsComplexStadiumLights(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiSportsComplexStadiumLights(ctx)
	return err
}

// GetApiSportsComplexTl1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiSportsComplexTl1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiSportsComplexTl1(ctx)
	return err
}

// PostApiSportsComplexTl1 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiSportsComplexTl1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiSportsComplexTl1(ctx)
	return err
}

// GetApiWaterPumpBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiWaterPumpBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiWaterPumpBuilding1(ctx)
	return err
}

// PostApiWaterPumpBuilding1 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiWaterPumpBuilding1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiWaterPumpBuilding1(ctx)
	return err
}

// GetApiWaterPumpPump2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiWaterPumpPump2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiWaterPumpPump2(ctx)
	return err
}

// PostApiWaterPumpPump2 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiWaterPumpPump2(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiWaterPumpPump2(ctx)
	return err
}

// GetApiWaterPumpPump3 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiWaterPumpPump3(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiWaterPumpPump3(ctx)
	return err
}

// PostApiWaterPumpPump3 converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiWaterPumpPump3(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiWaterPumpPump3(ctx)
	return err
}

// GetApiWaterPumpTransferBase converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiWaterPumpTransferBase(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiWaterPumpTransferBase(ctx)
	return err
}

// PostApiWaterPumpTransferBase converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiWaterPumpTransferBase(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiWaterPumpTransferBase(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/astana_lrt/building1", wrapper.GetApiAstanaLrtBuilding1)
	router.POST(baseURL+"/api/astana_lrt/building1", wrapper.PostApiAstanaLrtBuilding1)
	router.GET(baseURL+"/api/astana_lrt/streetlights1", wrapper.GetApiAstanaLrtStreetlights1)
	router.POST(baseURL+"/api/astana_lrt/streetlights1", wrapper.PostApiAstanaLrtStreetlights1)
	router.GET(baseURL+"/api/astana_lrt/tl1", wrapper.GetApiAstanaLrtTl1)
	router.POST(baseURL+"/api/astana_lrt/tl1", wrapper.PostApiAstanaLrtTl1)
	router.GET(baseURL+"/api/business_center/building1", wrapper.GetApiBusinessCenterBuilding1)
	router.POST(baseURL+"/api/business_center/building1", wrapper.PostApiBusinessCenterBuilding1)
	router.GET(baseURL+"/api/government_complex/building1", wrapper.GetApiGovernmentComplexBuilding1)
	router.POST(baseURL+"/api/government_complex/building1", wrapper.PostApiGovernmentComplexBuilding1)
	router.GET(baseURL+"/api/government_complex/building2", wrapper.GetApiGovernmentComplexBuilding2)
	router.POST(baseURL+"/api/government_complex/building2", wrapper.PostApiGovernmentComplexBuilding2)
	router.GET(baseURL+"/api/government_complex/building3", wrapper.GetApiGovernmentComplexBuilding3)
	router.POST(baseURL+"/api/government_complex/building3", wrapper.PostApiGovernmentComplexBuilding3)
	router.GET(baseURL+"/api/government_complex/building4", wrapper.GetApiGovernmentComplexBuilding4)
	router.POST(baseURL+"/api/government_complex/building4", wrapper.PostApiGovernmentComplexBuilding4)
	router.GET(baseURL+"/api/hospital/barrier", wrapper.GetApiHospitalBarrier)
	router.POST(baseURL+"/api/hospital/barrier", wrapper.PostApiHospitalBarrier)
	router.GET(baseURL+"/api/hospital/building1", wrapper.GetApiHospitalBuilding1)
	router.POST(baseURL+"/api/hospital/building1", wrapper.PostApiHospitalBuilding1)
	router.GET(baseURL+"/api/hospital/fire", wrapper.GetApiHospitalFire)
	router.POST(baseURL+"/api/hospital/fire", wrapper.PostApiHospitalFire)
	router.GET(baseURL+"/api/hospital/fire_alarm", wrapper.GetApiHospitalFireAlarm)
	router.POST(baseURL+"/api/hospital/fire_alarm", wrapper.PostApiHospitalFireAlarm)
	router.GET(baseURL+"/api/hospital/fire_truck", wrapper.GetApiHospitalFireTruck)
	router.POST(baseURL+"/api/hospital/fire_truck", wrapper.PostApiHospitalFireTruck)
	router.GET(baseURL+"/api/hospital/siren", wrapper.GetApiHospitalSiren)
	router.POST(baseURL+"/api/hospital/siren", wrapper.PostApiHospitalSiren)
	router.GET(baseURL+"/api/sports_complex/stadium_lights", wrapper.GetApiSportsComplexStadiumLights)
	router.POST(baseURL+"/api/sports_complex/stadium_lights", wrapper.PostApiSportsComplexStadiumLights)
	router.GET(baseURL+"/api/sports_complex/tl1", wrapper.GetApiSportsComplexTl1)
	router.POST(baseURL+"/api/sports_complex/tl1", wrapper.PostApiSportsComplexTl1)
	router.GET(baseURL+"/api/water_pump/building1", wrapper.GetApiWaterPumpBuilding1)
	router.POST(baseURL+"/api/water_pump/building1", wrapper.PostApiWaterPumpBuilding1)
	router.GET(baseURL+"/api/water_pump/pump2", wrapper.GetApiWaterPumpPump2)
	router.POST(baseURL+"/api/water_pump/pump2", wrapper.PostApiWaterPumpPump2)
	router.GET(baseURL+"/api/water_pump/pump3", wrapper.GetApiWaterPumpPump3)
	router.POST(baseURL+"/api/water_pump/pump3", wrapper.PostApiWaterPumpPump3)
	router.GET(baseURL+"/api/water_pump/transfer_base", wrapper.GetApiWaterPumpTransferBase)
	router.POST(baseURL+"/api/water_pump/transfer_base", wrapper.PostApiWaterPumpTransferBase)

}

type GetApiAstanaLrtBuilding1RequestObject struct {
}

type GetApiAstanaLrtBuilding1ResponseObject interface {
	VisitGetApiAstanaLrtBuilding1Response(w http.ResponseWriter) error
}

type GetApiAstanaLrtBuilding1200JSONResponse Discrete

func (response GetApiAstanaLrtBuilding1200JSONResponse) VisitGetApiAstanaLrtBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAstanaLrtBuilding1RequestObject struct {
	Body *PostApiAstanaLrtBuilding1JSONRequestBody
}

type PostApiAstanaLrtBuilding1ResponseObject interface {
	VisitPostApiAstanaLrtBuilding1Response(w http.ResponseWriter) error
}

type PostApiAstanaLrtBuilding1200JSONResponse Discrete

func (response PostApiAstanaLrtBuilding1200JSONResponse) VisitPostApiAstanaLrtBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAstanaLrtStreetlights1RequestObject struct {
}

type GetApiAstanaLrtStreetlights1ResponseObject interface {
	VisitGetApiAstanaLrtStreetlights1Response(w http.ResponseWriter) error
}

type GetApiAstanaLrtStreetlights1200JSONResponse Discrete

func (response GetApiAstanaLrtStreetlights1200JSONResponse) VisitGetApiAstanaLrtStreetlights1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAstanaLrtStreetlights1RequestObject struct {
	Body *PostApiAstanaLrtStreetlights1JSONRequestBody
}

type PostApiAstanaLrtStreetlights1ResponseObject interface {
	VisitPostApiAstanaLrtStreetlights1Response(w http.ResponseWriter) error
}

type PostApiAstanaLrtStreetlights1200JSONResponse Discrete

func (response PostApiAstanaLrtStreetlights1200JSONResponse) VisitPostApiAstanaLrtStreetlights1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAstanaLrtTl1RequestObject struct {
}

type GetApiAstanaLrtTl1ResponseObject interface {
	VisitGetApiAstanaLrtTl1Response(w http.ResponseWriter) error
}

type GetApiAstanaLrtTl1200JSONResponse Tl

func (response GetApiAstanaLrtTl1200JSONResponse) VisitGetApiAstanaLrtTl1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAstanaLrtTl1RequestObject struct {
	Body *PostApiAstanaLrtTl1JSONRequestBody
}

type PostApiAstanaLrtTl1ResponseObject interface {
	VisitPostApiAstanaLrtTl1Response(w http.ResponseWriter) error
}

type PostApiAstanaLrtTl1200JSONResponse Tl

func (response PostApiAstanaLrtTl1200JSONResponse) VisitPostApiAstanaLrtTl1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiBusinessCenterBuilding1RequestObject struct {
}

type GetApiBusinessCenterBuilding1ResponseObject interface {
	VisitGetApiBusinessCenterBuilding1Response(w http.ResponseWriter) error
}

type GetApiBusinessCenterBuilding1200JSONResponse Discrete

func (response GetApiBusinessCenterBuilding1200JSONResponse) VisitGetApiBusinessCenterBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiBusinessCenterBuilding1RequestObject struct {
	Body *PostApiBusinessCenterBuilding1JSONRequestBody
}

type PostApiBusinessCenterBuilding1ResponseObject interface {
	VisitPostApiBusinessCenterBuilding1Response(w http.ResponseWriter) error
}

type PostApiBusinessCenterBuilding1200JSONResponse Discrete

func (response PostApiBusinessCenterBuilding1200JSONResponse) VisitPostApiBusinessCenterBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiGovernmentComplexBuilding1RequestObject struct {
}

type GetApiGovernmentComplexBuilding1ResponseObject interface {
	VisitGetApiGovernmentComplexBuilding1Response(w http.ResponseWriter) error
}

type GetApiGovernmentComplexBuilding1200JSONResponse Discrete

func (response GetApiGovernmentComplexBuilding1200JSONResponse) VisitGetApiGovernmentComplexBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiGovernmentComplexBuilding1RequestObject struct {
	Body *PostApiGovernmentComplexBuilding1JSONRequestBody
}

type PostApiGovernmentComplexBuilding1ResponseObject interface {
	VisitPostApiGovernmentComplexBuilding1Response(w http.ResponseWriter) error
}

type PostApiGovernmentComplexBuilding1200JSONResponse Discrete

func (response PostApiGovernmentComplexBuilding1200JSONResponse) VisitPostApiGovernmentComplexBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiGovernmentComplexBuilding2RequestObject struct {
}

type GetApiGovernmentComplexBuilding2ResponseObject interface {
	VisitGetApiGovernmentComplexBuilding2Response(w http.ResponseWriter) error
}

type GetApiGovernmentComplexBuilding2200JSONResponse Discrete

func (response GetApiGovernmentComplexBuilding2200JSONResponse) VisitGetApiGovernmentComplexBuilding2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiGovernmentComplexBuilding2RequestObject struct {
	Body *PostApiGovernmentComplexBuilding2JSONRequestBody
}

type PostApiGovernmentComplexBuilding2ResponseObject interface {
	VisitPostApiGovernmentComplexBuilding2Response(w http.ResponseWriter) error
}

type PostApiGovernmentComplexBuilding2200JSONResponse Discrete

func (response PostApiGovernmentComplexBuilding2200JSONResponse) VisitPostApiGovernmentComplexBuilding2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiGovernmentComplexBuilding3RequestObject struct {
}

type GetApiGovernmentComplexBuilding3ResponseObject interface {
	VisitGetApiGovernmentComplexBuilding3Response(w http.ResponseWriter) error
}

type GetApiGovernmentComplexBuilding3200JSONResponse Discrete

func (response GetApiGovernmentComplexBuilding3200JSONResponse) VisitGetApiGovernmentComplexBuilding3Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiGovernmentComplexBuilding3RequestObject struct {
	Body *PostApiGovernmentComplexBuilding3JSONRequestBody
}

type PostApiGovernmentComplexBuilding3ResponseObject interface {
	VisitPostApiGovernmentComplexBuilding3Response(w http.ResponseWriter) error
}

type PostApiGovernmentComplexBuilding3200JSONResponse Discrete

func (response PostApiGovernmentComplexBuilding3200JSONResponse) VisitPostApiGovernmentComplexBuilding3Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiGovernmentComplexBuilding4RequestObject struct {
}

type GetApiGovernmentComplexBuilding4ResponseObject interface {
	VisitGetApiGovernmentComplexBuilding4Response(w http.ResponseWriter) error
}

type GetApiGovernmentComplexBuilding4200JSONResponse Discrete

func (response GetApiGovernmentComplexBuilding4200JSONResponse) VisitGetApiGovernmentComplexBuilding4Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiGovernmentComplexBuilding4RequestObject struct {
	Body *PostApiGovernmentComplexBuilding4JSONRequestBody
}

type PostApiGovernmentComplexBuilding4ResponseObject interface {
	VisitPostApiGovernmentComplexBuilding4Response(w http.ResponseWriter) error
}

type PostApiGovernmentComplexBuilding4200JSONResponse Discrete

func (response PostApiGovernmentComplexBuilding4200JSONResponse) VisitPostApiGovernmentComplexBuilding4Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiHospitalBarrierRequestObject struct {
}

type GetApiHospitalBarrierResponseObject interface {
	VisitGetApiHospitalBarrierResponse(w http.ResponseWriter) error
}

type GetApiHospitalBarrier200JSONResponse Discrete

func (response GetApiHospitalBarrier200JSONResponse) VisitGetApiHospitalBarrierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiHospitalBarrierRequestObject struct {
	Body *PostApiHospitalBarrierJSONRequestBody
}

type PostApiHospitalBarrierResponseObject interface {
	VisitPostApiHospitalBarrierResponse(w http.ResponseWriter) error
}

type PostApiHospitalBarrier200JSONResponse Discrete

func (response PostApiHospitalBarrier200JSONResponse) VisitPostApiHospitalBarrierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiHospitalBuilding1RequestObject struct {
}

type GetApiHospitalBuilding1ResponseObject interface {
	VisitGetApiHospitalBuilding1Response(w http.ResponseWriter) error
}

type GetApiHospitalBuilding1200JSONResponse Discrete

func (response GetApiHospitalBuilding1200JSONResponse) VisitGetApiHospitalBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiHospitalBuilding1RequestObject struct {
	Body *PostApiHospitalBuilding1JSONRequestBody
}

type PostApiHospitalBuilding1ResponseObject interface {
	VisitPostApiHospitalBuilding1Response(w http.ResponseWriter) error
}

type PostApiHospitalBuilding1200JSONResponse Discrete

func (response PostApiHospitalBuilding1200JSONResponse) VisitPostApiHospitalBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiHospitalFireRequestObject struct {
}

type GetApiHospitalFireResponseObject interface {
	VisitGetApiHospitalFireResponse(w http.ResponseWriter) error
}

type GetApiHospitalFire200JSONResponse Discrete

func (response GetApiHospitalFire200JSONResponse) VisitGetApiHospitalFireResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiHospitalFireRequestObject struct {
	Body *PostApiHospitalFireJSONRequestBody
}

type PostApiHospitalFireResponseObject interface {
	VisitPostApiHospitalFireResponse(w http.ResponseWriter) error
}

type PostApiHospitalFire200JSONResponse Discrete

func (response PostApiHospitalFire200JSONResponse) VisitPostApiHospitalFireResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiHospitalFireAlarmRequestObject struct {
}

type GetApiHospitalFireAlarmResponseObject interface {
	VisitGetApiHospitalFireAlarmResponse(w http.ResponseWriter) error
}

type GetApiHospitalFireAlarm200JSONResponse Discrete

func (response GetApiHospitalFireAlarm200JSONResponse) VisitGetApiHospitalFireAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiHospitalFireAlarmRequestObject struct {
	Body *PostApiHospitalFireAlarmJSONRequestBody
}

type PostApiHospitalFireAlarmResponseObject interface {
	VisitPostApiHospitalFireAlarmResponse(w http.ResponseWriter) error
}

type PostApiHospitalFireAlarm200JSONResponse Discrete

func (response PostApiHospitalFireAlarm200JSONResponse) VisitPostApiHospitalFireAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiHospitalFireTruckRequestObject struct {
}

type GetApiHospitalFireTruckResponseObject interface {
	VisitGetApiHospitalFireTruckResponse(w http.ResponseWriter) error
}

type GetApiHospitalFireTruck200JSONResponse Discrete

func (response GetApiHospitalFireTruck200JSONResponse) VisitGetApiHospitalFireTruckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiHospitalFireTruckRequestObject struct {
	Body *PostApiHospitalFireTruckJSONRequestBody
}

type PostApiHospitalFireTruckResponseObject interface {
	VisitPostApiHospitalFireTruckResponse(w http.ResponseWriter) error
}

type PostApiHospitalFireTruck200JSONResponse Discrete

func (response PostApiHospitalFireTruck200JSONResponse) VisitPostApiHospitalFireTruckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiHospitalSirenRequestObject struct {
}

type GetApiHospitalSirenResponseObject interface {
	VisitGetApiHospitalSirenResponse(w http.ResponseWriter) error
}

type GetApiHospitalSiren200JSONResponse Discrete

func (response GetApiHospitalSiren200JSONResponse) VisitGetApiHospitalSirenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiHospitalSirenRequestObject struct {
	Body *PostApiHospitalSirenJSONRequestBody
}

type PostApiHospitalSirenResponseObject interface {
	VisitPostApiHospitalSirenResponse(w http.ResponseWriter) error
}

type PostApiHospitalSiren200JSONResponse Discrete

func (response PostApiHospitalSiren200JSONResponse) VisitPostApiHospitalSirenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSportsComplexStadiumLightsRequestObject struct {
}

type GetApiSportsComplexStadiumLightsResponseObject interface {
	VisitGetApiSportsComplexStadiumLightsResponse(w http.ResponseWriter) error
}

type GetApiSportsComplexStadiumLights200JSONResponse Discrete

func (response GetApiSportsComplexStadiumLights200JSONResponse) VisitGetApiSportsComplexStadiumLightsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSportsComplexStadiumLightsRequestObject struct {
	Body *PostApiSportsComplexStadiumLightsJSONRequestBody
}

type PostApiSportsComplexStadiumLightsResponseObject interface {
	VisitPostApiSportsComplexStadiumLightsResponse(w http.ResponseWriter) error
}

type PostApiSportsComplexStadiumLights200JSONResponse Discrete

func (response PostApiSportsComplexStadiumLights200JSONResponse) VisitPostApiSportsComplexStadiumLightsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSportsComplexTl1RequestObject struct {
}

type GetApiSportsComplexTl1ResponseObject interface {
	VisitGetApiSportsComplexTl1Response(w http.ResponseWriter) error
}

type GetApiSportsComplexTl1200JSONResponse Tl

func (response GetApiSportsComplexTl1200JSONResponse) VisitGetApiSportsComplexTl1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSportsComplexTl1RequestObject struct {
	Body *PostApiSportsComplexTl1JSONRequestBody
}

type PostApiSportsComplexTl1ResponseObject interface {
	VisitPostApiSportsComplexTl1Response(w http.ResponseWriter) error
}

type PostApiSportsComplexTl1200JSONResponse Tl

func (response PostApiSportsComplexTl1200JSONResponse) VisitPostApiSportsComplexTl1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiWaterPumpBuilding1RequestObject struct {
}

type GetApiWaterPumpBuilding1ResponseObject interface {
	VisitGetApiWaterPumpBuilding1Response(w http.ResponseWriter) error
}

type GetApiWaterPumpBuilding1200JSONResponse Discrete

func (response GetApiWaterPumpBuilding1200JSONResponse) VisitGetApiWaterPumpBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiWaterPumpBuilding1RequestObject struct {
	Body *PostApiWaterPumpBuilding1JSONRequestBody
}

type PostApiWaterPumpBuilding1ResponseObject interface {
	VisitPostApiWaterPumpBuilding1Response(w http.ResponseWriter) error
}

type PostApiWaterPumpBuilding1200JSONResponse Discrete

func (response PostApiWaterPumpBuilding1200JSONResponse) VisitPostApiWaterPumpBuilding1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiWaterPumpPump2RequestObject struct {
}

type GetApiWaterPumpPump2ResponseObject interface {
	VisitGetApiWaterPumpPump2Response(w http.ResponseWriter) error
}

type GetApiWaterPumpPump2200JSONResponse Range

func (response GetApiWaterPumpPump2200JSONResponse) VisitGetApiWaterPumpPump2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiWaterPumpPump2RequestObject struct {
	Body *PostApiWaterPumpPump2JSONRequestBody
}

type PostApiWaterPumpPump2ResponseObject interface {
	VisitPostApiWaterPumpPump2Response(w http.ResponseWriter) error
}

type PostApiWaterPumpPump2200JSONResponse Range

func (response PostApiWaterPumpPump2200JSONResponse) VisitPostApiWaterPumpPump2Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiWaterPumpPump3RequestObject struct {
}

type GetApiWaterPumpPump3ResponseObject interface {
	VisitGetApiWaterPumpPump3Response(w http.ResponseWriter) error
}

type GetApiWaterPumpPump3200JSONResponse Range

func (response GetApiWaterPumpPump3200JSONResponse) VisitGetApiWaterPumpPump3Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiWaterPumpPump3RequestObject struct {
	Body *PostApiWaterPumpPump3JSONRequestBody
}

type PostApiWaterPumpPump3ResponseObject interface {
	VisitPostApiWaterPumpPump3Response(w http.ResponseWriter) error
}

type PostApiWaterPumpPump3200JSONResponse Range

func (response PostApiWaterPumpPump3200JSONResponse) VisitPostApiWaterPumpPump3Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiWaterPumpTransferBaseRequestObject struct {
}

type GetApiWaterPumpTransferBaseResponseObject interface {
	VisitGetApiWaterPumpTransferBaseResponse(w http.ResponseWriter) error
}

type GetApiWaterPumpTransferBase200JSONResponse Discrete

func (response GetApiWaterPumpTransferBase200JSONResponse) VisitGetApiWaterPumpTransferBaseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiWaterPumpTransferBaseRequestObject struct {
	Body *PostApiWaterPumpTransferBaseJSONRequestBody
}

type PostApiWaterPumpTransferBaseResponseObject interface {
	VisitPostApiWaterPumpTransferBaseResponse(w http.ResponseWriter) error
}

type PostApiWaterPumpTransferBase200JSONResponse Discrete

func (response PostApiWaterPumpTransferBase200JSONResponse) VisitPostApiWaterPumpTransferBaseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get information from /api/astana_lrt/building1
	// (GET /api/astana_lrt/building1)
	GetApiAstanaLrtBuilding1(ctx context.Context, request GetApiAstanaLrtBuilding1RequestObject) (GetApiAstanaLrtBuilding1ResponseObject, error)
	// Post data to /api/astana_lrt/building1
	// (POST /api/astana_lrt/building1)
	PostApiAstanaLrtBuilding1(ctx context.Context, request PostApiAstanaLrtBuilding1RequestObject) (PostApiAstanaLrtBuilding1ResponseObject, error)
	// Get information from /api/astana_lrt/streetlights1
	// (GET /api/astana_lrt/streetlights1)
	GetApiAstanaLrtStreetlights1(ctx context.Context, request GetApiAstanaLrtStreetlights1RequestObject) (GetApiAstanaLrtStreetlights1ResponseObject, error)
	// Post data to /api/astana_lrt/streetlights1
	// (POST /api/astana_lrt/streetlights1)
	PostApiAstanaLrtStreetlights1(ctx context.Context, request PostApiAstanaLrtStreetlights1RequestObject) (PostApiAstanaLrtStreetlights1ResponseObject, error)
	// Get information from /api/astana_lrt/tl1
	// (GET /api/astana_lrt/tl1)
	GetApiAstanaLrtTl1(ctx context.Context, request GetApiAstanaLrtTl1RequestObject) (GetApiAstanaLrtTl1ResponseObject, error)
	// Post data to /api/astana_lrt/tl1
	// (POST /api/astana_lrt/tl1)
	PostApiAstanaLrtTl1(ctx context.Context, request PostApiAstanaLrtTl1RequestObject) (PostApiAstanaLrtTl1ResponseObject, error)
	// Get information from /api/business_center/building1
	// (GET /api/business_center/building1)
	GetApiBusinessCenterBuilding1(ctx context.Context, request GetApiBusinessCenterBuilding1RequestObject) (GetApiBusinessCenterBuilding1ResponseObject, error)
	// Post data to /api/business_center/building1
	// (POST /api/business_center/building1)
	PostApiBusinessCenterBuilding1(ctx context.Context, request PostApiBusinessCenterBuilding1RequestObject) (PostApiBusinessCenterBuilding1ResponseObject, error)
	// Get information from /api/government_complex/building1
	// (GET /api/government_complex/building1)
	GetApiGovernmentComplexBuilding1(ctx context.Context, request GetApiGovernmentComplexBuilding1RequestObject) (GetApiGovernmentComplexBuilding1ResponseObject, error)
	// Post data to /api/government_complex/building1
	// (POST /api/government_complex/building1)
	PostApiGovernmentComplexBuilding1(ctx context.Context, request PostApiGovernmentComplexBuilding1RequestObject) (PostApiGovernmentComplexBuilding1ResponseObject, error)
	// Get information from /api/government_complex/building2
	// (GET /api/government_complex/building2)
	GetApiGovernmentComplexBuilding2(ctx context.Context, request GetApiGovernmentComplexBuilding2RequestObject) (GetApiGovernmentComplexBuilding2ResponseObject, error)
	// Post data to /api/government_complex/building2
	// (POST /api/government_complex/building2)
	PostApiGovernmentComplexBuilding2(ctx context.Context, request PostApiGovernmentComplexBuilding2RequestObject) (PostApiGovernmentComplexBuilding2ResponseObject, error)
	// Get information from /api/government_complex/building3
	// (GET /api/government_complex/building3)
	GetApiGovernmentComplexBuilding3(ctx context.Context, request GetApiGovernmentComplexBuilding3RequestObject) (GetApiGovernmentComplexBuilding3ResponseObject, error)
	// Post data to /api/government_complex/building3
	// (POST /api/government_complex/building3)
	PostApiGovernmentComplexBuilding3(ctx context.Context, request PostApiGovernmentComplexBuilding3RequestObject) (PostApiGovernmentComplexBuilding3ResponseObject, error)
	// Get information from /api/government_complex/building4
	// (GET /api/government_complex/building4)
	GetApiGovernmentComplexBuilding4(ctx context.Context, request GetApiGovernmentComplexBuilding4RequestObject) (GetApiGovernmentComplexBuilding4ResponseObject, error)
	// Post data to /api/government_complex/building4
	// (POST /api/government_complex/building4)
	PostApiGovernmentComplexBuilding4(ctx context.Context, request PostApiGovernmentComplexBuilding4RequestObject) (PostApiGovernmentComplexBuilding4ResponseObject, error)
	// Get information from /api/hospital/barrier
	// (GET /api/hospital/barrier)
	GetApiHospitalBarrier(ctx context.Context, request GetApiHospitalBarrierRequestObject) (GetApiHospitalBarrierResponseObject, error)
	// Post data to /api/hospital/barrier
	// (POST /api/hospital/barrier)
	PostApiHospitalBarrier(ctx context.Context, request PostApiHospitalBarrierRequestObject) (PostApiHospitalBarrierResponseObject, error)
	// Get information from /api/hospital/building1
	// (GET /api/hospital/building1)
	GetApiHospitalBuilding1(ctx context.Context, request GetApiHospitalBuilding1RequestObject) (GetApiHospitalBuilding1ResponseObject, error)
	// Post data to /api/hospital/building1
	// (POST /api/hospital/building1)
	PostApiHospitalBuilding1(ctx context.Context, request PostApiHospitalBuilding1RequestObject) (PostApiHospitalBuilding1ResponseObject, error)
	// Get information from /api/hospital/fire
	// (GET /api/hospital/fire)
	GetApiHospitalFire(ctx context.Context, request GetApiHospitalFireRequestObject) (GetApiHospitalFireResponseObject, error)
	// Post data to /api/hospital/fire
	// (POST /api/hospital/fire)
	PostApiHospitalFire(ctx context.Context, request PostApiHospitalFireRequestObject) (PostApiHospitalFireResponseObject, error)
	// Get information from /api/hospital/fire_alarm
	// (GET /api/hospital/fire_alarm)
	GetApiHospitalFireAlarm(ctx context.Context, request GetApiHospitalFireAlarmRequestObject) (GetApiHospitalFireAlarmResponseObject, error)
	// Post data to /api/hospital/fire_alarm
	// (POST /api/hospital/fire_alarm)
	PostApiHospitalFireAlarm(ctx context.Context, request PostApiHospitalFireAlarmRequestObject) (PostApiHospitalFireAlarmResponseObject, error)
	// Get information from /api/hospital/fire_truck
	// (GET /api/hospital/fire_truck)
	GetApiHospitalFireTruck(ctx context.Context, request GetApiHospitalFireTruckRequestObject) (GetApiHospitalFireTruckResponseObject, error)
	// Post data to /api/hospital/fire_truck
	// (POST /api/hospital/fire_truck)
	PostApiHospitalFireTruck(ctx context.Context, request PostApiHospitalFireTruckRequestObject) (PostApiHospitalFireTruckResponseObject, error)
	// Get information from /api/hospital/siren
	// (GET /api/hospital/siren)
	GetApiHospitalSiren(ctx context.Context, request GetApiHospitalSirenRequestObject) (GetApiHospitalSirenResponseObject, error)
	// Post data to /api/hospital/siren
	// (POST /api/hospital/siren)
	PostApiHospitalSiren(ctx context.Context, request PostApiHospitalSirenRequestObject) (PostApiHospitalSirenResponseObject, error)
	// Get information from /api/sports_complex/stadium_lights
	// (GET /api/sports_complex/stadium_lights)
	GetApiSportsComplexStadiumLights(ctx context.Context, request GetApiSportsComplexStadiumLightsRequestObject) (GetApiSportsComplexStadiumLightsResponseObject, error)
	// Post data to /api/sports_complex/stadium_lights
	// (POST /api/sports_complex/stadium_lights)
	PostApiSportsComplexStadiumLights(ctx context.Context, request PostApiSportsComplexStadiumLightsRequestObject) (PostApiSportsComplexStadiumLightsResponseObject, error)
	// Get information from /api/sports_complex/tl1
	// (GET /api/sports_complex/tl1)
	GetApiSportsComplexTl1(ctx context.Context, request GetApiSportsComplexTl1RequestObject) (GetApiSportsComplexTl1ResponseObject, error)
	// Post data to /api/sports_complex/tl1
	// (POST /api/sports_complex/tl1)
	PostApiSportsComplexTl1(ctx context.Context, request PostApiSportsComplexTl1RequestObject) (PostApiSportsComplexTl1ResponseObject, error)
	// Get information from /api/water_pump/building1
	// (GET /api/water_pump/building1)
	GetApiWaterPumpBuilding1(ctx context.Context, request GetApiWaterPumpBuilding1RequestObject) (GetApiWaterPumpBuilding1ResponseObject, error)
	// Post data to /api/water_pump/building1
	// (POST /api/water_pump/building1)
	PostApiWaterPumpBuilding1(ctx context.Context, request PostApiWaterPumpBuilding1RequestObject) (PostApiWaterPumpBuilding1ResponseObject, error)
	// Get information from /api/water_pump/pump2
	// (GET /api/water_pump/pump2)
	GetApiWaterPumpPump2(ctx context.Context, request GetApiWaterPumpPump2RequestObject) (GetApiWaterPumpPump2ResponseObject, error)
	// Post data to /api/water_pump/pump2
	// (POST /api/water_pump/pump2)
	PostApiWaterPumpPump2(ctx context.Context, request PostApiWaterPumpPump2RequestObject) (PostApiWaterPumpPump2ResponseObject, error)
	// Get information from /api/water_pump/pump3
	// (GET /api/water_pump/pump3)
	GetApiWaterPumpPump3(ctx context.Context, request GetApiWaterPumpPump3RequestObject) (GetApiWaterPumpPump3ResponseObject, error)
	// Post data to /api/water_pump/pump3
	// (POST /api/water_pump/pump3)
	PostApiWaterPumpPump3(ctx context.Context, request PostApiWaterPumpPump3RequestObject) (PostApiWaterPumpPump3ResponseObject, error)
	// Get information from /api/water_pump/transfer_base
	// (GET /api/water_pump/transfer_base)
	GetApiWaterPumpTransferBase(ctx context.Context, request GetApiWaterPumpTransferBaseRequestObject) (GetApiWaterPumpTransferBaseResponseObject, error)
	// Post data to /api/water_pump/transfer_base
	// (POST /api/water_pump/transfer_base)
	PostApiWaterPumpTransferBase(ctx context.Context, request PostApiWaterPumpTransferBaseRequestObject) (PostApiWaterPumpTransferBaseResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetApiAstanaLrtBuilding1 operation middleware
func (sh *strictHandler) GetApiAstanaLrtBuilding1(ctx echo.Context) error {
	var request GetApiAstanaLrtBuilding1RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAstanaLrtBuilding1(ctx.Request().Context(), request.(GetApiAstanaLrtBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAstanaLrtBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiAstanaLrtBuilding1ResponseObject); ok {
		return validResponse.VisitGetApiAstanaLrtBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiAstanaLrtBuilding1 operation middleware
func (sh *strictHandler) PostApiAstanaLrtBuilding1(ctx echo.Context) error {
	var request PostApiAstanaLrtBuilding1RequestObject

	var body PostApiAstanaLrtBuilding1JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAstanaLrtBuilding1(ctx.Request().Context(), request.(PostApiAstanaLrtBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAstanaLrtBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiAstanaLrtBuilding1ResponseObject); ok {
		return validResponse.VisitPostApiAstanaLrtBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiAstanaLrtStreetlights1 operation middleware
func (sh *strictHandler) GetApiAstanaLrtStreetlights1(ctx echo.Context) error {
	var request GetApiAstanaLrtStreetlights1RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAstanaLrtStreetlights1(ctx.Request().Context(), request.(GetApiAstanaLrtStreetlights1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAstanaLrtStreetlights1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiAstanaLrtStreetlights1ResponseObject); ok {
		return validResponse.VisitGetApiAstanaLrtStreetlights1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiAstanaLrtStreetlights1 operation middleware
func (sh *strictHandler) PostApiAstanaLrtStreetlights1(ctx echo.Context) error {
	var request PostApiAstanaLrtStreetlights1RequestObject

	var body PostApiAstanaLrtStreetlights1JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAstanaLrtStreetlights1(ctx.Request().Context(), request.(PostApiAstanaLrtStreetlights1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAstanaLrtStreetlights1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiAstanaLrtStreetlights1ResponseObject); ok {
		return validResponse.VisitPostApiAstanaLrtStreetlights1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiAstanaLrtTl1 operation middleware
func (sh *strictHandler) GetApiAstanaLrtTl1(ctx echo.Context) error {
	var request GetApiAstanaLrtTl1RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAstanaLrtTl1(ctx.Request().Context(), request.(GetApiAstanaLrtTl1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAstanaLrtTl1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiAstanaLrtTl1ResponseObject); ok {
		return validResponse.VisitGetApiAstanaLrtTl1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiAstanaLrtTl1 operation middleware
func (sh *strictHandler) PostApiAstanaLrtTl1(ctx echo.Context) error {
	var request PostApiAstanaLrtTl1RequestObject

	var body PostApiAstanaLrtTl1JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAstanaLrtTl1(ctx.Request().Context(), request.(PostApiAstanaLrtTl1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAstanaLrtTl1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiAstanaLrtTl1ResponseObject); ok {
		return validResponse.VisitPostApiAstanaLrtTl1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiBusinessCenterBuilding1 operation middleware
func (sh *strictHandler) GetApiBusinessCenterBuilding1(ctx echo.Context) error {
	var request GetApiBusinessCenterBuilding1RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiBusinessCenterBuilding1(ctx.Request().Context(), request.(GetApiBusinessCenterBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiBusinessCenterBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiBusinessCenterBuilding1ResponseObject); ok {
		return validResponse.VisitGetApiBusinessCenterBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiBusinessCenterBuilding1 operation middleware
func (sh *strictHandler) PostApiBusinessCenterBuilding1(ctx echo.Context) error {
	var request PostApiBusinessCenterBuilding1RequestObject

	var body PostApiBusinessCenterBuilding1JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiBusinessCenterBuilding1(ctx.Request().Context(), request.(PostApiBusinessCenterBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiBusinessCenterBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiBusinessCenterBuilding1ResponseObject); ok {
		return validResponse.VisitPostApiBusinessCenterBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiGovernmentComplexBuilding1 operation middleware
func (sh *strictHandler) GetApiGovernmentComplexBuilding1(ctx echo.Context) error {
	var request GetApiGovernmentComplexBuilding1RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiGovernmentComplexBuilding1(ctx.Request().Context(), request.(GetApiGovernmentComplexBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiGovernmentComplexBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiGovernmentComplexBuilding1ResponseObject); ok {
		return validResponse.VisitGetApiGovernmentComplexBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiGovernmentComplexBuilding1 operation middleware
func (sh *strictHandler) PostApiGovernmentComplexBuilding1(ctx echo.Context) error {
	var request PostApiGovernmentComplexBuilding1RequestObject

	var body PostApiGovernmentComplexBuilding1JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiGovernmentComplexBuilding1(ctx.Request().Context(), request.(PostApiGovernmentComplexBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiGovernmentComplexBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiGovernmentComplexBuilding1ResponseObject); ok {
		return validResponse.VisitPostApiGovernmentComplexBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiGovernmentComplexBuilding2 operation middleware
func (sh *strictHandler) GetApiGovernmentComplexBuilding2(ctx echo.Context) error {
	var request GetApiGovernmentComplexBuilding2RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiGovernmentComplexBuilding2(ctx.Request().Context(), request.(GetApiGovernmentComplexBuilding2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiGovernmentComplexBuilding2")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiGovernmentComplexBuilding2ResponseObject); ok {
		return validResponse.VisitGetApiGovernmentComplexBuilding2Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiGovernmentComplexBuilding2 operation middleware
func (sh *strictHandler) PostApiGovernmentComplexBuilding2(ctx echo.Context) error {
	var request PostApiGovernmentComplexBuilding2RequestObject

	var body PostApiGovernmentComplexBuilding2JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiGovernmentComplexBuilding2(ctx.Request().Context(), request.(PostApiGovernmentComplexBuilding2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiGovernmentComplexBuilding2")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiGovernmentComplexBuilding2ResponseObject); ok {
		return validResponse.VisitPostApiGovernmentComplexBuilding2Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiGovernmentComplexBuilding3 operation middleware
func (sh *strictHandler) GetApiGovernmentComplexBuilding3(ctx echo.Context) error {
	var request GetApiGovernmentComplexBuilding3RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiGovernmentComplexBuilding3(ctx.Request().Context(), request.(GetApiGovernmentComplexBuilding3RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiGovernmentComplexBuilding3")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiGovernmentComplexBuilding3ResponseObject); ok {
		return validResponse.VisitGetApiGovernmentComplexBuilding3Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiGovernmentComplexBuilding3 operation middleware
func (sh *strictHandler) PostApiGovernmentComplexBuilding3(ctx echo.Context) error {
	var request PostApiGovernmentComplexBuilding3RequestObject

	var body PostApiGovernmentComplexBuilding3JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiGovernmentComplexBuilding3(ctx.Request().Context(), request.(PostApiGovernmentComplexBuilding3RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiGovernmentComplexBuilding3")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiGovernmentComplexBuilding3ResponseObject); ok {
		return validResponse.VisitPostApiGovernmentComplexBuilding3Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiGovernmentComplexBuilding4 operation middleware
func (sh *strictHandler) GetApiGovernmentComplexBuilding4(ctx echo.Context) error {
	var request GetApiGovernmentComplexBuilding4RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiGovernmentComplexBuilding4(ctx.Request().Context(), request.(GetApiGovernmentComplexBuilding4RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiGovernmentComplexBuilding4")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiGovernmentComplexBuilding4ResponseObject); ok {
		return validResponse.VisitGetApiGovernmentComplexBuilding4Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiGovernmentComplexBuilding4 operation middleware
func (sh *strictHandler) PostApiGovernmentComplexBuilding4(ctx echo.Context) error {
	var request PostApiGovernmentComplexBuilding4RequestObject

	var body PostApiGovernmentComplexBuilding4JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiGovernmentComplexBuilding4(ctx.Request().Context(), request.(PostApiGovernmentComplexBuilding4RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiGovernmentComplexBuilding4")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiGovernmentComplexBuilding4ResponseObject); ok {
		return validResponse.VisitPostApiGovernmentComplexBuilding4Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiHospitalBarrier operation middleware
func (sh *strictHandler) GetApiHospitalBarrier(ctx echo.Context) error {
	var request GetApiHospitalBarrierRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHospitalBarrier(ctx.Request().Context(), request.(GetApiHospitalBarrierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHospitalBarrier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiHospitalBarrierResponseObject); ok {
		return validResponse.VisitGetApiHospitalBarrierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiHospitalBarrier operation middleware
func (sh *strictHandler) PostApiHospitalBarrier(ctx echo.Context) error {
	var request PostApiHospitalBarrierRequestObject

	var body PostApiHospitalBarrierJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiHospitalBarrier(ctx.Request().Context(), request.(PostApiHospitalBarrierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiHospitalBarrier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiHospitalBarrierResponseObject); ok {
		return validResponse.VisitPostApiHospitalBarrierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiHospitalBuilding1 operation middleware
func (sh *strictHandler) GetApiHospitalBuilding1(ctx echo.Context) error {
	var request GetApiHospitalBuilding1RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHospitalBuilding1(ctx.Request().Context(), request.(GetApiHospitalBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHospitalBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiHospitalBuilding1ResponseObject); ok {
		return validResponse.VisitGetApiHospitalBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiHospitalBuilding1 operation middleware
func (sh *strictHandler) PostApiHospitalBuilding1(ctx echo.Context) error {
	var request PostApiHospitalBuilding1RequestObject

	var body PostApiHospitalBuilding1JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiHospitalBuilding1(ctx.Request().Context(), request.(PostApiHospitalBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiHospitalBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiHospitalBuilding1ResponseObject); ok {
		return validResponse.VisitPostApiHospitalBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiHospitalFire operation middleware
func (sh *strictHandler) GetApiHospitalFire(ctx echo.Context) error {
	var request GetApiHospitalFireRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHospitalFire(ctx.Request().Context(), request.(GetApiHospitalFireRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHospitalFire")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiHospitalFireResponseObject); ok {
		return validResponse.VisitGetApiHospitalFireResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiHospitalFire operation middleware
func (sh *strictHandler) PostApiHospitalFire(ctx echo.Context) error {
	var request PostApiHospitalFireRequestObject

	var body PostApiHospitalFireJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiHospitalFire(ctx.Request().Context(), request.(PostApiHospitalFireRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiHospitalFire")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiHospitalFireResponseObject); ok {
		return validResponse.VisitPostApiHospitalFireResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiHospitalFireAlarm operation middleware
func (sh *strictHandler) GetApiHospitalFireAlarm(ctx echo.Context) error {
	var request GetApiHospitalFireAlarmRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHospitalFireAlarm(ctx.Request().Context(), request.(GetApiHospitalFireAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHospitalFireAlarm")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiHospitalFireAlarmResponseObject); ok {
		return validResponse.VisitGetApiHospitalFireAlarmResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiHospitalFireAlarm operation middleware
func (sh *strictHandler) PostApiHospitalFireAlarm(ctx echo.Context) error {
	var request PostApiHospitalFireAlarmRequestObject

	var body PostApiHospitalFireAlarmJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiHospitalFireAlarm(ctx.Request().Context(), request.(PostApiHospitalFireAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiHospitalFireAlarm")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiHospitalFireAlarmResponseObject); ok {
		return validResponse.VisitPostApiHospitalFireAlarmResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiHospitalFireTruck operation middleware
func (sh *strictHandler) GetApiHospitalFireTruck(ctx echo.Context) error {
	var request GetApiHospitalFireTruckRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHospitalFireTruck(ctx.Request().Context(), request.(GetApiHospitalFireTruckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHospitalFireTruck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiHospitalFireTruckResponseObject); ok {
		return validResponse.VisitGetApiHospitalFireTruckResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiHospitalFireTruck operation middleware
func (sh *strictHandler) PostApiHospitalFireTruck(ctx echo.Context) error {
	var request PostApiHospitalFireTruckRequestObject

	var body PostApiHospitalFireTruckJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiHospitalFireTruck(ctx.Request().Context(), request.(PostApiHospitalFireTruckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiHospitalFireTruck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiHospitalFireTruckResponseObject); ok {
		return validResponse.VisitPostApiHospitalFireTruckResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiHospitalSiren operation middleware
func (sh *strictHandler) GetApiHospitalSiren(ctx echo.Context) error {
	var request GetApiHospitalSirenRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHospitalSiren(ctx.Request().Context(), request.(GetApiHospitalSirenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHospitalSiren")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiHospitalSirenResponseObject); ok {
		return validResponse.VisitGetApiHospitalSirenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiHospitalSiren operation middleware
func (sh *strictHandler) PostApiHospitalSiren(ctx echo.Context) error {
	var request PostApiHospitalSirenRequestObject

	var body PostApiHospitalSirenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiHospitalSiren(ctx.Request().Context(), request.(PostApiHospitalSirenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiHospitalSiren")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiHospitalSirenResponseObject); ok {
		return validResponse.VisitPostApiHospitalSirenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiSportsComplexStadiumLights operation middleware
func (sh *strictHandler) GetApiSportsComplexStadiumLights(ctx echo.Context) error {
	var request GetApiSportsComplexStadiumLightsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiSportsComplexStadiumLights(ctx.Request().Context(), request.(GetApiSportsComplexStadiumLightsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiSportsComplexStadiumLights")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiSportsComplexStadiumLightsResponseObject); ok {
		return validResponse.VisitGetApiSportsComplexStadiumLightsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiSportsComplexStadiumLights operation middleware
func (sh *strictHandler) PostApiSportsComplexStadiumLights(ctx echo.Context) error {
	var request PostApiSportsComplexStadiumLightsRequestObject

	var body PostApiSportsComplexStadiumLightsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSportsComplexStadiumLights(ctx.Request().Context(), request.(PostApiSportsComplexStadiumLightsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSportsComplexStadiumLights")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiSportsComplexStadiumLightsResponseObject); ok {
		return validResponse.VisitPostApiSportsComplexStadiumLightsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiSportsComplexTl1 operation middleware
func (sh *strictHandler) GetApiSportsComplexTl1(ctx echo.Context) error {
	var request GetApiSportsComplexTl1RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiSportsComplexTl1(ctx.Request().Context(), request.(GetApiSportsComplexTl1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiSportsComplexTl1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiSportsComplexTl1ResponseObject); ok {
		return validResponse.VisitGetApiSportsComplexTl1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiSportsComplexTl1 operation middleware
func (sh *strictHandler) PostApiSportsComplexTl1(ctx echo.Context) error {
	var request PostApiSportsComplexTl1RequestObject

	var body PostApiSportsComplexTl1JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSportsComplexTl1(ctx.Request().Context(), request.(PostApiSportsComplexTl1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSportsComplexTl1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiSportsComplexTl1ResponseObject); ok {
		return validResponse.VisitPostApiSportsComplexTl1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiWaterPumpBuilding1 operation middleware
func (sh *strictHandler) GetApiWaterPumpBuilding1(ctx echo.Context) error {
	var request GetApiWaterPumpBuilding1RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiWaterPumpBuilding1(ctx.Request().Context(), request.(GetApiWaterPumpBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiWaterPumpBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiWaterPumpBuilding1ResponseObject); ok {
		return validResponse.VisitGetApiWaterPumpBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiWaterPumpBuilding1 operation middleware
func (sh *strictHandler) PostApiWaterPumpBuilding1(ctx echo.Context) error {
	var request PostApiWaterPumpBuilding1RequestObject

	var body PostApiWaterPumpBuilding1JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiWaterPumpBuilding1(ctx.Request().Context(), request.(PostApiWaterPumpBuilding1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiWaterPumpBuilding1")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiWaterPumpBuilding1ResponseObject); ok {
		return validResponse.VisitPostApiWaterPumpBuilding1Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiWaterPumpPump2 operation middleware
func (sh *strictHandler) GetApiWaterPumpPump2(ctx echo.Context) error {
	var request GetApiWaterPumpPump2RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiWaterPumpPump2(ctx.Request().Context(), request.(GetApiWaterPumpPump2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiWaterPumpPump2")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiWaterPumpPump2ResponseObject); ok {
		return validResponse.VisitGetApiWaterPumpPump2Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiWaterPumpPump2 operation middleware
func (sh *strictHandler) PostApiWaterPumpPump2(ctx echo.Context) error {
	var request PostApiWaterPumpPump2RequestObject

	var body PostApiWaterPumpPump2JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiWaterPumpPump2(ctx.Request().Context(), request.(PostApiWaterPumpPump2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiWaterPumpPump2")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiWaterPumpPump2ResponseObject); ok {
		return validResponse.VisitPostApiWaterPumpPump2Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiWaterPumpPump3 operation middleware
func (sh *strictHandler) GetApiWaterPumpPump3(ctx echo.Context) error {
	var request GetApiWaterPumpPump3RequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiWaterPumpPump3(ctx.Request().Context(), request.(GetApiWaterPumpPump3RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiWaterPumpPump3")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiWaterPumpPump3ResponseObject); ok {
		return validResponse.VisitGetApiWaterPumpPump3Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiWaterPumpPump3 operation middleware
func (sh *strictHandler) PostApiWaterPumpPump3(ctx echo.Context) error {
	var request PostApiWaterPumpPump3RequestObject

	var body PostApiWaterPumpPump3JSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiWaterPumpPump3(ctx.Request().Context(), request.(PostApiWaterPumpPump3RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiWaterPumpPump3")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiWaterPumpPump3ResponseObject); ok {
		return validResponse.VisitPostApiWaterPumpPump3Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiWaterPumpTransferBase operation middleware
func (sh *strictHandler) GetApiWaterPumpTransferBase(ctx echo.Context) error {
	var request GetApiWaterPumpTransferBaseRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiWaterPumpTransferBase(ctx.Request().Context(), request.(GetApiWaterPumpTransferBaseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiWaterPumpTransferBase")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiWaterPumpTransferBaseResponseObject); ok {
		return validResponse.VisitGetApiWaterPumpTransferBaseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiWaterPumpTransferBase operation middleware
func (sh *strictHandler) PostApiWaterPumpTransferBase(ctx echo.Context) error {
	var request PostApiWaterPumpTransferBaseRequestObject

	var body PostApiWaterPumpTransferBaseJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiWaterPumpTransferBase(ctx.Request().Context(), request.(PostApiWaterPumpTransferBaseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiWaterPumpTransferBase")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiWaterPumpTransferBaseResponseObject); ok {
		return validResponse.VisitPostApiWaterPumpTransferBaseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+ybTW/bthvAv4rA//+o1I6Vk4EekgLrCvQQIAV2GAaDlmmHrUSqJJUmKAz0ZVhXDOiA",
	"YecNu+3odslqNI33FahvNJCS7doW9eLYwRTo4tqRwOfx7/k9BEWzz4FL/YASRAQH7eeAu8fIh/ptD3OX",
	"IYHU+4DRADGBkb5yAr1Q/xmR0AftbwHt94ENKAE26HqYPAHf2UCcBQi0ARcMkwGwwekOhQHecWkPDRDZ",
	"QaeCwR0BB3rELiY9dVsbMPQ0xAz1bEoQ7d+l/b5NiR2POhwO7dkNKm6cyDwY7T5GrgDqLkgGWZn78BT7",
	"KvndZtMGPibxp+ZsKEwEGiC2RuIDge42bU+gu7vNZpmchbeaMHr2JWeVzhmwwWBzgJl9Zg+AStKnvZSi",
	"wlBQYAOO2Al2EbCBD0kIvc1WWAWxkxB2EkClxMkNffulGmkUqyVSt2HSp2pIgYWnrt1HBDEoUM/aP3wA",
	"bHCCGMeUgDbYvdO801R1pQEiMMCgDRz9JxsEUBzrxBowwA3IBSSw4zHR6IbYU5nuqosDJHQfIu4yHIh4",
	"VPlb9FJeyYn8oF8vLPlRnsuRvJJjeQF0MAbVvQ96OjuxH+B9HeAhEwez4dX35QElPNas1Wyqf1xKBCI6",
	"KgwCD7t6pMZjTsl8clDv/s9QH7TB/xrz2aORTB2N2byheS1mfxS6LuK8H3rWNH5c6ND3ITuLM7YUY+br",
	"2FafUd8yYxraIKD82pwOKc8A9TREXBzQ3tmWGM3VEyxEw/9sbRQlqwcFtATNqsnQXhGbC4aQ8PDgWPAc",
	"uT/Ii+itvIgrZUWv5aUcRz/kqX20EKDaei/Cyla8IK1lwVdx1ZIXkHypMimiCy9D7z90uV7JSfS9nEQv",
	"rB1rN8/rR95WbRbeFj1WLMz2FoGxrO2UxuZlnYK4OU3XRZ8pqEY+1bIbckwQ5x0XEYHYllYXB0mUezpI",
	"pZcYZmCbXWdkIavnYZPmGdWZGj+gJ4gRHxHRUQl56PS60htn6PuzUPfiSJU2PxPcevKbp/McdHUHmDog",
	"u0oFmqC1ZhO0yjZB65Y1QWvdJmiVboJW3QTrNkGrUBM45ib4VU7kP9ec/51bpr6ToX4hXnnCO7Xw6wrv",
	"FBJ+r5Twpef6vVsm/F454cvP8Hu18OsKvzcX/pjyAAvoNbqQMYyYWfI/5aUcyb/kezmKXsvPBr+/TsY7",
	"SIaroNQrSMwi5zFJHE6DUotrEneV/6qsW9mDmZWpys+gKYw2u+2STqnWOV/n1YfM2bU+Zsjs8u9yIv+W",
	"o+hFjrhfqVGq7KzGYNbVzGHJzRmIWstcLWPmqUZ2oAeZX8BL+UmOCri5r4eruqAJlQKapmJJUXXOpfa1",
	"kK/TEqRbK1joPili7ZUcRT9b8rMcRT/KsfpYQOJHevTKSxxDKiJxAUopTs8x1U4XczqpyIrTHDNEzDr/",
	"Ij/Jy+hd9GZ+fuGlHEcv1Mfopxyhj/TYVZY5pmP2uCSeJZPnfGqLcy1OSjEVmAeUCT7bfOAC9nDod+Jz",
	"H6VOL72MXsmRPJdjOcmYpI90vGSX6CiO9jAOVkHBs+mVOs6Uhy9xPodf3QCmBsgplaEfNnTGaaFqlTvn",
	"lMJkI2edUqnU550yrF048/QMCsQ6QegHW9pq+0YFOAz9oNJ7bamYNrvbZgBVT8YmrdNrkiK2emllLasn",
	"8lxO1CN89Ea9Gn/Sm5XoUI+4RVbx/8fZnsQxkqy1dD6TZW/nUDbv7Bc8bk7YaxQh09YEvsFUp4ypThFT",
	"naqb6pQy1SlkqlObWsxUJ9VUwSDhfcQ6Xcgzf8+40A/gcXXG8oMcRe+it/E+03s5kh+ND3mzaj1KQh2o",
	"SNVeOyxSy9qSWwPbsuUr3OqlRAHll0o0HA7/DQAA//8IGc2M9DsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
